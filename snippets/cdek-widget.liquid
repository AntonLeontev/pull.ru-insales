<style>
  #cdekmap {
    width: 100%;
    height: 550px;
  }
  ymaps {
    position: static;
  }
  .ymaps3x0--top-engine-container {
    position: absolute;
    top: 0;
  }

  .delivery__additional {
	display: flex;
	flex-direction: column;
	row-gap: 20px;
	margin-top: 20px;
  }
</style>


<div class="info_card" 
  @order-changed.window="recalculate"
  x-data="{
    show: false,
    widget: null,
    initiated: false,

    init() {
      this.widget = new window.CDEKWidget({ 
        from: {
          code: 44,
        }, 
        root: 'cdekmap', 
        canChoose: true,
        apiKey: 'd61a22ab-67bc-4adc-8397-e65d01be70dc', 
        servicePath: 'https://api.pull.ru/webhooks/delivery/widget', 
        defaultLocation: 'Москва',
        tariffs: {
          office: [483, 62, 136, 234],
          door: [482, 122, 137, 233],
          pickup: [368, 378],
        },
      onCalculate(tariff, address) {
        cdekmap.dispatchEvent(new CustomEvent('delivery-calculated', {
            bubbles: true,
            detail: {
              tariff: tariff,
              address: address,
            }
          }));
      },
        onChoose(type, tariff, address) {
          cdekmap.dispatchEvent(new CustomEvent('delivery-chosen', {
            bubbles: true,
            detail: {
              type: type,
              tariff: tariff,
              address: address,
            }
          }));
        },
      })
    },
    recalculate() {
      this.widget.resetParcels()
      this.widget.resetParcels()
      this.cart.items.forEach(line => {
        this.widget.addParcel(this.getParcel(line))
      })
    },
    toggle() {
      this.show = !this.show

      if (!this.initiated) {
        this.initiate()
      }
    },
    initiate() {
      this.widget.resetParcels()
      this.cart.items.forEach(line => {
        this.widget.addParcel(this.getParcel(line))
      })

      this.initiated = true
    },
    getParcel(orderLine) {
      let weight = orderLine.weight * 1000 * orderLine.quantity

      if (_.isNull(orderLine.dimensions) || orderLine.dimensions === '') {
        return {weight: weight}
      }

      let dimensions = orderLine.dimensions.split(/x|х/)
      const min = _.minBy(dimensions, function(d) { return +d; })
      const indexOfMin = dimensions.indexOf(min)
      dimensions.splice(indexOfMin, 1)

      return {
        weight: weight,
        width: +dimensions[0],
        length: +dimensions[1],
        height: min * orderLine.quantity
      }
    },
  }"
>
  <div class="card_name" @click="toggle">
    <span>Доставка</span>
    <img class="icon" width="30px" src="{{ 'down.svg' | asset_url }}" alt="icon down" :class="show && 'rotated'">
  </div>
  <div class="card_content" x-show="show" x-transition>
    <div id="cdekmap"></div>
	<div class="delivery__additional" x-show="deliveryType === 'door'">
		<input class="ordinary_input" name="entrance" placeholder="Подъезд" x-ref="entrance">
		<input class="ordinary_input" name="floor" placeholder="Этаж" x-ref="floor">
		<input class="ordinary_input" name="apartment" placeholder="Квартира" x-ref="apartment">
		<input class="ordinary_input" name="intercom" placeholder="Код домофона" x-ref="intercom">
	</div>
  </div>
</div>


