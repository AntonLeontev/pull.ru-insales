<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/cdek-it/widget@3/dist/cdek-widget.umd.js" charset="utf-8"></script>


{% if cart.items == empty %}
    <div class="container">
      <h3>Ваша корзина пуста!</h3>
    </div>
{% endif %}
{% if cart.items != empty %}
  <form id="cart_form" data-cart-form action="/cart_items" method="post" class="cart_section" 
    @delivery-chosen="setDelivery"
    @delivery-calculated="updateDelivery"
    @cart-event="update"
    @client-detected="fillClient"
    @submit.prevent="submit"
    x-data="{
      deliveryType: null,
      freeToPoint: {{ blocks.with_template['system-single-text'].v-punkt-vydachi.text }},
      freeToCourier: {{ blocks.with_template['system-single-text'].kurierom.text }},
      deliveryTariff: null,
      deliveryAddress: null,
      paymentTypeId: '5982078',
      deliveryVariantId: '7921162',
      email: null,
      name: null,
      phone: null,
      cart: null,
      cartReady: false,
      coupon: '{{ cart.coupon }}',
      agree: true,
      productsOrganizations: {},
      orderKey: null,

      init() {
        ajaxAPI.cart.get()
          .done(cart => {
            this.cart = cart
            this.cartReady = true
            this.getOrganizations()
          })
        $.getJSON('/client_account/contacts.json',
          function(data){
            if (data.message === 'Not authorized') return

            if (data.status === 'ok') {
              this.email = data.client.email
              this.phone = data.client.phone
              this.name = data.client.contact_name
            }
          }
        );
      },
      update() {
        ajaxAPI.cart.get().done(done => {
          this.cart = done

          if (this.cart.items.length === 0) {
            location.replace('/')
            return
          }

          this.getOrganizations()
          this.$dispatch('order-changed')
        })
      },
      isAllowedRegion(event) {
        if (event.detail.type != 'door') {
          return true;
        }

        let isAllowed = false
        event.detail.address.components.forEach(component => {
          if (component.kind != 'province') return

          if (sessionStorage.getItem('allowed_regions').includes(component.name)) {
            isAllowed = true
          }
        })

        return isAllowed
      },
      setDelivery() {
        if (! this.isAllowedRegion(this.$event)) {
          this.$dispatch('toast-error', {message: 'Доставка в выбранный регион временно невозможна', delay: 4000})
          this.deliveryType = null
          this.deliveryTariff = null
          this.deliveryAddress = null
          return
        }

        this.deliveryType = this.$event.detail.type
        this.deliveryTariff = this.$event.detail.tariff
        this.deliveryAddress = this.$event.detail.address
      },
      updateDelivery() {
        if (this.deliveryTariff === null) {
          return
        }

        if (! this.isAllowedRegion(this.$event)) {
          this.$dispatch('toast-error', {message: 'Доставка в выбранный регион временно невозможна', delay: 4000})
          this.deliveryType = null
          this.deliveryTariff = null
          this.deliveryAddress = null
          return
        }

        let tariffs = this.$event.detail.tariff
        tariffs = [...tariffs.door, ...tariffs.office, ...tariffs.pickup]
        tariffs.forEach(tariff => {
          if (tariff.tariff_code === this.deliveryTariff.tariff_code) {
            this.deliveryTariff = tariff
            return
          }
        })
      },
      submit() {
        if (this.name === null || this.email === null || this.phone === null) {
          this.$dispatch('toast-error', {message: 'Заполните данные получателя', delay: 4000})
          document.querySelector('#customer').scrollIntoView({behavior: 'smooth'})
          return 
        }

        if (this.name === '' || this.email === '' || this.phone === '') {
          this.$dispatch('toast-error', {message: 'Заполните данные получателя', delay: 4000})
          document.querySelector('#customer').scrollIntoView({behavior: 'smooth'})
          return 
        }
        
        if (this.deliveryTariff === null || this.deliveryType === null || this.deliveryAddress === null) {
          this.$dispatch('toast-error', {message: 'Выберите способ доставки', delay: 4000})
          document.querySelector('#cdekmap').scrollIntoView({behavior: 'smooth'})
          return 
        }

        if (!this.agree) {
          this.$dispatch('toast-error', {message: 'Нужно принять условия пользования', delay: 4000})
          return 
        }

        this.createOrder()
        
      },
      createOrder(paymentStatus = 'pending') {
        let address

        if (this.deliveryType === 'office') {
          address = `${this.deliveryAddress.code}, ${this.deliveryAddress.region}, ${this.deliveryAddress.city}, ${this.deliveryAddress.address}`
        }

        if (this.deliveryType === 'door') {
			    address = this.deliveryAddress.formatted

          if ($('[name=\'apartment\']').val() != '') {
            address += ', кв. ' + $('[name=\'apartment\']').val()
            this.deliveryAddress.apartment = $('[name=\'apartment\']').val()
          }
          if ($('[name=\'floor\']').val() != '') {
            address += ', этаж ' + $('[name=\'floor\']').val()
            this.deliveryAddress.floor = $('[name=\'floor\']').val()
          }
          if ($('[name=\'entrance\']').val() != '') {
            address += ', подъезд ' + $('[name=\'entrance\']').val()
            this.deliveryAddress.entrance = $('[name=\'entrance\']').val()
          }
          if ($('[name=\'intercom\']').val() != '') {
            address += ', домофон ' + $('[name=\'intercom\']').val()
            this.deliveryAddress.intercom = $('[name=\'intercom\']').val()
          }
        }

        let button = document.getElementById('submit_order');
        button.disabled = true

        $.post('/fast_checkout.json', {
          client: {
            email: this.email,
            name: this.name,
            phone: this.phone,
            consent_to_personal_data: true,
          },
          order: {
            delivery_variant_id: this.deliveryVariantId,
            payment_gateway_id: this.paymentTypeId,
            delivery_price: this.deliveryPrice(),
            financial_status: paymentStatus,
            fields_values_attributes: [
              {
                handle: 'delivery_data',
                value: JSON.stringify({
                  deliveryPrice: this.deliveryPrice(),
                  deliveryTariff: this.deliveryTariff,
                  deliveryType: this.deliveryType,
                  deliveryAddress: this.deliveryAddress,
                }),
              }
            ],
          },
          shipping_address: {
            phone: this.phone,
            city: this.deliveryAddress.city,
            address: address,
          }
        })
        .done((response) => {
          if (response.status == 'ok') {
            this.sendMetrica(response.order)

            this.orderKey = response.order.key

			      if (this.paymentTypeId == 5982078) {
              this.pay(response.order)
              return;
            }

            location.href = '/orders/' + this.orderKey + '?success=1'
          } else {
            let messages = []
            if (response.errors.hasOwnProperty('shipping_address.phone')) {
              response.errors['shipping_address.phone'].forEach(el => messages.push(el))
            }
            if (response.errors.hasOwnProperty('order_lines.quantity')) {
              response.errors['order_lines.quantity'].forEach(el => messages.push(el))
            }
            if (response.errors.hasOwnProperty('payment_gateway_id')) {
              response.errors['payment_gateway_id'].forEach(el => messages.push(el))
            }
            let message = messages.join('<br><br>')
            if (message == '') {
              message = 'Ошибка оформления заказа'
            }
			      this.$dispatch('toast-error', {message, delay: 4000})
          }
        })
        .fail((fail) => {
			    this.$dispatch('toast-error', {message: 'Ошибка оформления заказа'})
          console.log(fail.errors);
        })
        .always(() => button.disabled = false)
      },
      fillClient() {
        this.name = this.$event.detail.name
        this.phone = this.$event.detail.phone
        this.email = this.$event.detail.email
      },
      deliveryPrice() {
        if (this.deliveryType === 'office' && this.cart?.total_price > this.freeToPoint) {
          return 0
        }

        if (this.deliveryType === 'door' && this.cart?.total_price > this.freeToCourier) {
          return 0
        }

        return this.deliveryTariff?.delivery_sum ?? 0
      },
      setCoupon() {
        Cart.setCoupon({coupon: this.coupon})
      },
      getOrganizations() {
        let productsIds = new Set();
        this.cart.items.forEach(line => productsIds.add(line.product_id))
        productsIds = Array.from(productsIds).join(',')
        $.get(`/products_by_id/${productsIds}.json`)
          .success(response => {
            let result = {}

            response.products.forEach(product => {
              let brandId = product.characteristics.find(el => el.property_id == 53902709).id

              if (!sessionStorage.getItem('brands') || !sessionStorage.getItem('organizations')) {
                setTimeout(this.getOrganizations, 1000);
                return
              }

              let brand = JSON.parse(sessionStorage.getItem('brands')).find(el => el.id == brandId)
              let organization = JSON.parse(sessionStorage.getItem('organizations')).find(el => el.id == brand.organization_id)

              result[product.id] = organization
            })

            this.productsOrganizations = result
          })
      },
      pay(order) {
        let widget = new cp.CloudPayments({
          yandexPaySupport: false,
          applePaySupport: false,
          googlePaySupport: false,
          masterPassSupport: false,
          tinkoffInstallmentSupport: false
        });

        let receipt = {
          'Items': [],
          'taxationSystem': 2,
          'calculationPlace': 'limmite.ru', //место осуществления расчёта, по умолчанию берется значение из кассы
          'phone': order.client.phone, //телефон покупателя в любом формате, если нужно отправить сообщение со ссылкой на чек
          'isBso': false, //чек является бланком строгой отчётности
          'amounts':
            {
              'electronic': order.total_price, // Сумма оплаты электронными деньгами
              'advancePayment': 0.00, // Сумма из предоплаты (зачетом аванса) (2 знака после запятой)
              'credit': 0.00, // Сумма постоплатой(в кредит) (2 знака после запятой)
              'provision': 0.00 // Сумма оплаты встречным предоставлением (сертификаты, др. мат.ценности) (2 знака после запятой)
            }
        };


        order.order_lines.forEach(line => {
          receipt['Items'].push({
            'label': line.title, //наименование товара
            'price': line.full_sale_price, //цена
            'quantity': line.quantity, //количество
            'amount': line.full_total_price, //сумма
            'vat': null, //ставка НДС
            'method': 1, // тег-1214 признак способа расчета - признак способа расчета
            'object': 1, // тег-1212 признак предмета расчета - признак предмета товара, работы, услуги, платежа, выплаты, иного предмета расчета
            'measurementUnit': 'шт', //единица измерения
            'AgentSign': 6, //признак агента, тег ОФД 1057, 1222
            'PurveyorData': { //данные поставщика платежного агента,  тег ОФД 1224
              'Name': this.productsOrganizations[line.product_id].title, // наименование поставщика, тег ОФД 1225
              'Inn': this.productsOrganizations[line.product_id].inn // ИНН поставщика, тег ОФД 1226
            }
          })
        })

        if (order.full_delivery_price > 0) {
          receipt['Items'].push({
            'label': 'Доставка', //наименование товара
            'price': order.full_delivery_price, //цена
            'quantity': 1, //количество
            'amount': order.full_delivery_price, //сумма
            'vat': null, //ставка НДС
            'method': 1, // тег-1214 признак способа расчета - признак способа расчета
            'object': 4, // тег-1212 признак предмета расчета - признак предмета товара, работы, услуги, платежа, выплаты, иного предмета расчета
          })
        }

        widget.pay('charge',
          { 
            // publicId: 'pk_c99424b82aed407cd4b167d280b77' // test,
            publicId: 'pk_211facd05c03ac924464a0ff67758',
            description: 'Оплата товаров в limmite.ru',
            amount: order.total_price,
            currency: 'RUB',
            invoiceId: order.number,
            email: order.client.email,
            skin: 'classic',
            data: {
              CloudPayments: { CustomerReceipt: receipt }
            }
          }, {
            onSuccess: (options) => { // success
              location.href = '/orders/' + this.orderKey + '?success=1'
            },
            onFail: (reason, options) => { // fail
              //действие при неуспешной оплате
            },
            onComplete: (paymentResult, options) => { //Вызывается как только виджет получает от api.cloudpayments ответ с результатом транзакции.
              //например вызов вашей аналитики Facebook Pixel
            }
          }
        )
      },
      sendMetrica(order) {
        let products = []

        order.order_lines.forEach(line => {
          let name = line.title.replace(/ \(.+\)/g, '')
          let match = line.title.match(/\(.+\)/)
          let variant

          if (match.length > 0) {
            variant = match[0].replaceAll('(', '')
            variant = variant.replaceAll(')', '')
          } else {
            variant = null;
          }

          products.push({
            'id': line.product_id,
            'name': name,
            'price': line.full_sale_price,
            // 'category': 'Одежда/Мужская одежда/Толстовки и свитшоты',
            'variant': variant,
            'quantity': line.quantity,
            // 'list': 'Одежда',
            // 'position': 1
          })
        })

        dataLayer.push({
          'ecommerce': {
            'currencyCode': 'RUB',
            'purchase': {
              'actionField': {
                'id' : order.number,
                'coupon': '{{ cart.coupon }}',
                // 'goal_id': '',
              },
              'products': products
            }
          }
        });
      },
    }"
  >

    <div class="section-order section-cart">
        <div class="container">
         

        <div id="cartform" class="cartform">
          <div class="content">
            <div class="section_header">
              <div class="section_title flex_100">
                Ваш заказ
              </div>
              <div class="product_items">
                {% for item in cart.items %}
                  <div class="product_item {{ cart_class }}" data-product-id="{{ item.product.id }}" data-item-id="{{ item.id }}">
                    <a href="{{item.product.canonical_url}}" class="product_img">
                      <img src="{{ item.variant.first_image.large_url }}" alt="">
                    </a>
                    <div class="product_text">
                      <div class="product_text_header">
                        <a href="{{item.product.canonical_url}}" class="product_name">{{ item.product.title | escape }}</a>

                        <button data-item-delete="{{ item.id }}" type="button" class="product_delete_tgl">
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M22.2979 3.76471H17.383V2.58824C17.383 1.90179 17.1117 1.24346 16.6289 0.758077C16.1461 0.272688 15.4913 0 14.8085 0H9.19149C8.5087 0 7.85387 0.272688 7.37107 0.758077C6.88826 1.24346 6.61702 1.90179 6.61702 2.58824V3.76471H1.70213C1.51591 3.76471 1.33732 3.83908 1.20565 3.97145C1.07397 4.10383 1 4.28338 1 4.47059C1 4.6578 1.07397 4.83734 1.20565 4.96972C1.33732 5.1021 1.51591 5.17647 1.70213 5.17647H2.87234V22.3529C2.87234 22.7898 3.04495 23.2087 3.35219 23.5176C3.65943 23.8265 4.07613 24 4.51064 24H19.4894C19.9239 24 20.3406 23.8265 20.6478 23.5176C20.9551 23.2087 21.1277 22.7898 21.1277 22.3529V5.17647H22.2979C22.4841 5.17647 22.6627 5.1021 22.7944 4.96972C22.926 4.83734 23 4.6578 23 4.47059C23 4.28338 22.926 4.10383 22.7944 3.97145C22.6627 3.83908 22.4841 3.76471 22.2979 3.76471ZM8.02128 2.58824C8.02128 2.27622 8.14457 1.97698 8.36402 1.75634C8.58348 1.53571 8.88113 1.41176 9.19149 1.41176H14.8085C15.1189 1.41176 15.4165 1.53571 15.636 1.75634C15.8554 1.97698 15.9787 2.27622 15.9787 2.58824V3.76471H8.02128V2.58824ZM19.7234 22.3529C19.7234 22.4153 19.6987 22.4752 19.6549 22.5193C19.611 22.5634 19.5514 22.5882 19.4894 22.5882H4.51064C4.44857 22.5882 4.38904 22.5634 4.34514 22.5193C4.30125 22.4752 4.2766 22.4153 4.2766 22.3529V5.17647H19.7234V22.3529ZM9.89362 10.1176V17.6471C9.89362 17.8343 9.81964 18.0138 9.68797 18.1462C9.55629 18.2786 9.3777 18.3529 9.19149 18.3529C9.00527 18.3529 8.82668 18.2786 8.69501 18.1462C8.56334 18.0138 8.48936 17.8343 8.48936 17.6471V10.1176C8.48936 9.93044 8.56334 9.75089 8.69501 9.61851C8.82668 9.48613 9.00527 9.41177 9.19149 9.41177C9.3777 9.41177 9.55629 9.48613 9.68797 9.61851C9.81964 9.75089 9.89362 9.93044 9.89362 10.1176ZM15.5106 10.1176V17.6471C15.5106 17.8343 15.4367 18.0138 15.305 18.1462C15.1733 18.2786 14.9947 18.3529 14.8085 18.3529C14.6223 18.3529 14.4437 18.2786 14.312 18.1462C14.1804 18.0138 14.1064 17.8343 14.1064 17.6471V10.1176C14.1064 9.93044 14.1804 9.75089 14.312 9.61851C14.4437 9.48613 14.6223 9.41177 14.8085 9.41177C14.9947 9.41177 15.1733 9.48613 15.305 9.61851C15.4367 9.75089 15.5106 9.93044 15.5106 10.1176Z" fill="#111111"/>
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M19.7234 22.3529C19.7234 22.4153 19.6987 22.4752 19.6549 22.5193C19.611 22.5634 19.5514 22.5882 19.4894 22.5882H4.51064C4.44857 22.5882 4.38904 22.5634 4.34514 22.5193C4.30125 22.4752 4.2766 22.4153 4.2766 22.3529V5.17647H19.7234V22.3529ZM9.89362 17.6471V10.1176C9.89362 9.93044 9.81964 9.75089 9.68797 9.61851C9.55629 9.48613 9.3777 9.41177 9.19149 9.41177C9.00527 9.41177 8.82668 9.48613 8.69501 9.61851C8.56334 9.75089 8.48936 9.93044 8.48936 10.1176V17.6471C8.48936 17.8343 8.56334 18.0138 8.69501 18.1462C8.82668 18.2786 9.00527 18.3529 9.19149 18.3529C9.3777 18.3529 9.55629 18.2786 9.68797 18.1462C9.81964 18.0138 9.89362 17.8343 9.89362 17.6471ZM15.5106 17.6471V10.1176C15.5106 9.93044 15.4367 9.75089 15.305 9.61851C15.1733 9.48613 14.9947 9.41177 14.8085 9.41177C14.6223 9.41177 14.4437 9.48613 14.312 9.61851C14.1804 9.75089 14.1064 9.93044 14.1064 10.1176V17.6471C14.1064 17.8343 14.1804 18.0138 14.312 18.1462C14.4437 18.2786 14.6223 18.3529 14.8085 18.3529C14.9947 18.3529 15.1733 18.2786 15.305 18.1462C15.4367 18.0138 15.5106 17.8343 15.5106 17.6471Z" fill="white"/>
                            <path d="M8.02128 2.58824C8.02128 2.27622 8.14457 1.97698 8.36402 1.75634C8.58348 1.53571 8.88113 1.41176 9.19149 1.41176H14.8085C15.1189 1.41176 15.4165 1.53571 15.636 1.75634C15.8554 1.97698 15.9787 2.27622 15.9787 2.58824V3.76471H8.02128V2.58824Z" fill="white"/>
                          </svg>
                        </button>

                      </div>
                      <div class="product_text_body">
                        {% for option_value in item.variant.option_values %}
                          <div class="body_info_item">
                            <div class="item_label">{{ option_value.option_name.title }}:</div>
                            <div class="item_info">{{ option_value.title }}</div>
                          </div>
                        {% endfor %}
                      </div>
                      <div class="product_text_footer">
                        <div class="product_qty" data-quantity>
                          <button type="button" data-quantity-change="-1" class="minus-btn" data-item="{{ item.id }}">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
                              <path fill-rule="evenodd" clip-rule="evenodd" d="M14 7.0015C14 7.12 13.9529 7.23364 13.8691 7.31744C13.7853 7.40123 13.6717 7.4483 13.5532 7.4483H7.44681H6.55319H0.446808C0.328308 7.4483 0.21466 7.40123 0.130867 7.31744C0.0470743 7.23364 0 7.12 0 7.0015C0 6.883 0.0470743 6.76935 0.130867 6.68555C0.21466 6.60176 0.328308 6.55469 0.446808 6.55469H6.55319H7.44681H13.5532C13.6717 6.55469 13.7853 6.60176 13.8691 6.68555C13.9529 6.76935 14 6.883 14 7.0015Z" fill="#767676"/>
                            </svg>
                          </button>
                          

                          <input type="text" value="{{ item.quantity }}" class="count" name="cart[quantity][{{ item.id }}]" id="ol_quantity_{{ item.id }}">
                          
                          <button class="plus-btn" type="button" data-quantity-change="1">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
                              <g clip-path="url(#clip0_54_2717)">
                                <path d="M14 7C14 7.1185 13.9529 7.23215 13.8691 7.31594C13.7853 7.39973 13.6717 7.44681 13.5532 7.44681H7.44681V13.5532C7.44681 13.6717 7.39973 13.7853 7.31594 13.8691C7.23215 13.9529 7.1185 14 7 14C6.8815 14 6.76785 13.9529 6.68406 13.8691C6.60027 13.7853 6.55319 13.6717 6.55319 13.5532V7.44681H0.446809C0.328308 7.44681 0.21466 7.39973 0.130867 7.31594C0.0470743 7.23215 0 7.1185 0 7C0 6.8815 0.0470743 6.76785 0.130867 6.68406C0.21466 6.60027 0.328308 6.55319 0.446809 6.55319H6.55319V0.446809C6.55319 0.328308 6.60027 0.21466 6.68406 0.130867C6.76785 0.0470743 6.8815 0 7 0C7.1185 0 7.23215 0.0470743 7.31594 0.130867C7.39973 0.21466 7.44681 0.328308 7.44681 0.446809V6.55319H13.5532C13.6717 6.55319 13.7853 6.60027 13.8691 6.68406C13.9529 6.76785 14 6.8815 14 7Z" fill="#767676"/>
                              </g>
                              <defs>
                                <clipPath id="clip0_54_2717">
                                  <rect width="14" height="14" fill="white"/>
                                </clipPath>
                              </defs>
                            </svg>
                          </button>

                        </div>
                        <div class="product_sum" data-cart-item-total-price>{{ item.total_price | money }}</div>
                        
                      </div>
                    </div>
                  </div>
                {% endfor %}
              </div>

              <div class="order_info_inner">
                {% include 'cdek-widget' %}
                
                <div class="info_card" x-data="{show: true}" id="customer">
                  <div class="card_name" @click="show = !show">
                    <span>Получатель</span>
                    <img class="icon" width="30px" src="{{ 'down.svg' | asset_url }}" alt="icon down" :class="show && 'rotated'">
                  </div>
                
                  <div class="card_content" :class="show && 'active'">
                    <div class="card_content_wrap">
                      <div class="order_form">
                          <input class="ordinary_input" name="email" placeholder="E-mail" x-ref="email" x-model="email" inputmode="email">
                          <input class="ordinary_input" name="name" placeholder="Имя" x-ref="name" x-model="name">
                          <input class="ordinary_input" name="phone" placeholder="Телефон" x-ref="phone" x-model="phone" inputmode="tel">
                      </div>
                    </div>
                  </div>
                </div>

                <div class="info_button">
                  <div class="sum_info sub_info">
                    Выберите способ оплаты
                  </div>
                  <div class="payment-variants">
                    {% for payment_variant in account.payment_gateways %}
                      <div class="payment-variants__item">
                        <label>
                          <input 
                            type="radio" 
                            name="select_payment" 
                            value="{{payment_variant.id}}"
                            x-model="paymentTypeId"
                          >
                          <div class="check"></div>
                          {{payment_variant.title}}
                        </label>
                      </div>
                    {% endfor %}
                  </div>
                </div>

                
                <div class="promo">
                  <div class="section_header">
                    <!-- <div class="section_title flex_100">
                      У вас есть промокод?
                    </div> -->
                    <div class="" style="display: flex;width: 100%;">
                      <input
                        type="text"
                        placeholder="Ваш промокод"
                        name="cart[coupon]"
                        value="{{ cart.coupon }}"
                        class="ordinary_input" 
                        x-model="coupon"
                      />
                      <button type="button" class="button_black" @click="setCoupon">
                        Применить
                      </button>
                    </div>
                    <div class="promo-error" data-cart-discounts-error></div>
                  </div>
                </div>
				
                <button type="submit" class="button_black" id="submit_order" style="width: 100%;">Оформить заказ</button>

                <div class="radio-check mt-24">
                  <label>
                    <input 
                      type="checkbox" 
                      x-model="agree"
                    >
                    <div class="check"></div>
                    <span>
                      При осуществлении заказа вы подтверждаете, что вы ознакомились с условиями <a href="https://static.insales-cdn.com/files/1/3327/33565951/original/terms_of_use.pdf" target="_blank" class="text-danger inline">Пользовательского соглашения</a>, включая порядок оплаты, доставки, хранения и возврата, с порядком работы Limmite, процессинговых компаний по доставке товаров и приёму платежей (<a class="text-danger inline" href="/page/how-it-works">Как это работает</a>), и согласны с ними.
                    </span>
                  </label>
                </div>
              </div>
            </div>
          </div>
          
        </div>
        <div class="pay_promo_wrapper">
          <div class="pay">
            <div class="section_header">
                <div class="section_title flex_100">
                  Итого к оплате
                </div>
                
              </div>
              <div class="payment_content">
                <div class="loading-cover" x-show="!cartReady" x-transition.opacity.duration.600ms.delay.100ms>
                  <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg">
                  <circle class="spin" cx="400" cy="400" fill="none"
                  r="40" stroke-width="13" stroke="#111111"
                  stroke-dasharray="202 1400" />
                  </svg>
                </div>
                <ul class="payment_content_list">
                    <li class="list_item">
                        <div class="label">Всего товаров</div>
                        <div class="info"><span x-text="cart?.items_count"></span> шт.</div>
                    </li>
                    <li class="list_item">
                        <div class="label">Цена</div>
                        <div class="info"><span x-text="formatNumber(cart?.total_price)"></span> ₽</div>
                    </li>
                    <li class="list_item" x-show="cart?.discounts[0]?.amount">
                      <div class="label">Скидка</div>
                      <div class="info">
                        <div class="discount">
                          <div class="discount-title" x-text="cart?.discount_description">
                            {{ discount.description }}
                          </div>
                          <div class="discount-prices prices">
                            <span class="prices-current" 
                              x-show="cart?.discounts[0]?.amount"
                              x-text="'- ' + cart?.discounts[0]?.amount + ' ₽'">
                              - {{ discount.amount | money }}
                            </span>
                          </div>
                        </div>
                        {% if cart.discounts.size > 0 %}
                          {% for discount in cart.discounts %}
                          {% endfor %}
                        {% endif %}
                      </div>
                  </li>
                  <li class="list_item">
                      <div class="label">
                        <span>Доставка</span>
                      </div>
                      <div class="info" x-text="deliveryTariff ? deliveryPrice() + ' ₽' : 'Не выбрана'"></div>
                  </li>
                  <li class="list_item">
                      <div class="label">Итого к оплате:</div>
                      <div class="info"><span x-text="formatNumber(cart?.total_price + deliveryPrice())"></span> ₽</div>
                  </li>
                </ul>
                <div class="total_sum">
                    <div class="sum_label">Итого к оплате:</div>
                    <div class="sum" x-text="formatNumber(cart?.total_price + deliveryPrice()) + ' ₽'"></div>
                </div>
              </div>
          </div>
        </div>
        </div>
    </div>



  </form>
  
{% endif %}

<div class="modal" 
  style="display: none;" 
  x-show="show" 
  @law-info.window="show = true"
  x-transition.opacity
  x-data="{show: false}"
>
  <div class="modal__window" @click.outside="show = false">
    <div class="modal__header">
      <div class="modal__title">Обязательно к ознакомлению!</div>
      <div class="modal__close" @click="show = false">
        <img src="{{ 'ICO-close-white.svg' | asset_url }}" alt="закрыть окно">
      </div>
    </div>
    <div class="modal__body">
      <p class="text-secondary">
        Limmite не участвует в непосредственной продаже товаров, их доставке и приеме платежей. Все товары представлены в наш каталог продавцами Limmite.
      </p>
      <p class="text-secondary">
        Оплата заказанного товара производится без участия Limmite с использованием авторизованной процессинговой компании, выбранной продавцом.
        Доставка товара осуществляется также процессинговой компанией.
      </p>
    </div>
  </div>
</div>

<script>
  /*---------- Удаление товара из корзины ----------*/
  function sendRemovedToMetrica(data) {
    dataLayer.push({
      "ecommerce": {
        "currencyCode": "RUB",
        "remove": {
          "products": [
              {
                "id": `${data.product.id}`,
                "name": data.product.title,
                "variant": data.variant,
                "quantity": data.quantity,
                "price": data.product.price,
              }
          ]
        }
      }
    });
  }

  function sendAddedToMetrica(data) {
    dataLayer.push({
      "ecommerce": {
        "currencyCode": "RUB",
        "add": {
          "products": [
              {
                "id": `${data.product.id}`,
                "name": data.product.title,
                "variant": data.variant,
                "quantity": data.quantity,
                "price": data.product.price,
              }
          ]
        }
      }
    });
  }

  EventBus.subscribe('always:insales:cart', function (data) {
    console.log(data.action.method, data);
	  if (data.action.method === 'delete_items') {
      data.action.items.forEach(item => {
        $(`[data-item-id=${item}]`).remove()
      })

      let item = data.action.prevStateCart.order_lines.find(el => {
        return el.product_id == data.action.product_id && 
        el.variant_id == data.action.variant_id
      })
      let match = item.title.match(/\(.+\)/)
      let variant

      if (match.length > 0) {
        variant = match[0].replaceAll('(', '')
        variant = variant.replaceAll(')', '')
      } else {
        variant = null;
      }

      sendRemovedToMetrica({product: item.product, quantity: data.action.quantity, variant})
	  }

    if (data.action.method === 'set_items') {
      let currentItems = data.action.items;
      let prevItems = {}
      data.action.prevStateCart.order_lines.forEach(el => {
        prevItems[el.id] = el.quantity
      })

      removedItems = []
      addedItems = []

      for (let productId in currentItems) {
        if (Object.prototype.hasOwnProperty.call(currentItems, productId)) {
            let item = data.action.currentItems.find(el => el.id == productId)
            let match = item.title.match(/\(.+\)/)
            let variant

            if (match.length > 0) {
              variant = match[0].replaceAll('(', '')
              variant = variant.replaceAll(')', '')
            } else {
              variant = null;
            }

            if (currentItems[productId] > prevItems[productId]) {
              let diff = currentItems[productId] - prevItems[productId];

              addedItems.push({product: item.product, quantity: diff, variant})
            }

            if (currentItems[productId] < prevItems[productId]) {
              let diff = prevItems[productId] - currentItems[productId];

              removedItems.push({product: item.product, quantity: diff, variant})
            }
        }
      }

      removedItems.forEach(el => sendRemovedToMetrica(el))
      addedItems.forEach(el => sendAddedToMetrica(el))
    }
    
    cart_form.dispatchEvent(new CustomEvent('cart-event', {
      detail: data
    }));
    
	  Cart.forceUpdate()
    cart_form.dispatchEvent(new CustomEvent('cart-changed', {
      bubbles: true,
      detail: Cart.order.items_count
    }));
  });
</script>
{% if client %}
  <script>
    /*---------- Заполнение данных клиента, если залогинен ----------*/
    
    ajaxAPI.shop.client.get()
      .done(function (client) { 
        cart_form.dispatchEvent(new CustomEvent('client-detected', {
          detail: {name: client.name, email: client.email, phone: client.phone}
        }));
      })
  </script>
{% endif %}
